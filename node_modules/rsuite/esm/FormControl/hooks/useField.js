'use client';
import _extends from "@babel/runtime/helpers/esm/extends";
import { useCallback, useMemo } from 'react';
import get from 'lodash/get';
import set from 'lodash/set';
import { nameToPath } from "../utils.js";
function useField(props) {
  var name = props.name,
    formValue = props.formValue,
    formError = props.formError,
    value = props.value,
    nestedField = props.nestedField,
    errorMessage = props.errorMessage,
    errorFromContext = props.errorFromContext;
  var fieldValue = useMemo(function () {
    if (typeof value !== 'undefined') {
      return value;
    }
    return nestedField ? get(formValue, name) : formValue === null || formValue === void 0 ? void 0 : formValue[name];
  }, [formValue, name, nestedField, value]);
  var fieldError = useMemo(function () {
    if (typeof errorMessage !== 'undefined' || !errorFromContext) {
      return errorMessage;
    }
    if (nestedField) {
      var _get;
      return (_get = get(formError, nameToPath(name))) === null || _get === void 0 ? void 0 : _get.errorMessage;
    }
    var fieldError = formError === null || formError === void 0 ? void 0 : formError[name];
    if (typeof fieldError === 'string') {
      return fieldError;
    }
    return fieldError === null || fieldError === void 0 ? void 0 : fieldError.errorMessage;
  }, [errorFromContext, errorMessage, formError, name, nestedField]);
  var setFieldValue = useCallback(function (fieldName, fieldValue) {
    var _extends2;
    if (nestedField) {
      return set(_extends({}, formValue), fieldName, fieldValue);
    }
    return _extends({}, formValue, (_extends2 = {}, _extends2[fieldName] = fieldValue, _extends2));
  }, [formValue, nestedField]);
  return {
    fieldValue: fieldValue,
    fieldError: fieldError,
    setFieldValue: setFieldValue
  };
}
export default useField;