'use client';
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = useFormValidate;
var _extends5 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("react");
var _omit = _interopRequireDefault(require("lodash/omit"));
var _set = _interopRequireDefault(require("lodash/set"));
var _hooks = require("../../internals/hooks");
var _utils = require("../../FormControl/utils");
function useFormValidate(formError, props) {
  var formValue = props.formValue,
    getCombinedModel = props.getCombinedModel,
    onCheck = props.onCheck,
    onError = props.onError,
    nestedField = props.nestedField;
  var _useControlled = (0, _hooks.useControlled)(formError, {}),
    realFormError = _useControlled[0],
    setFormError = _useControlled[1];
  var realFormErrorRef = (0, _react.useRef)(realFormError);
  realFormErrorRef.current = realFormError;

  /**
   * Validate the form data and return a boolean.
   * The error message after verification is returned in the callback.
   * @param callback
   */
  var check = (0, _hooks.useEventCallback)(function (callback) {
    var formError = {};
    var errorCount = 0;
    var model = getCombinedModel();
    Object.keys(model.getSchemaSpec()).forEach(function (key) {
      var checkResult = model.checkForField(key, formValue || {});
      if (checkResult.hasError === true) {
        errorCount += 1;
        formError[key] = (checkResult === null || checkResult === void 0 ? void 0 : checkResult.errorMessage) || checkResult;
      }
    });
    setFormError(formError);
    onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);
    callback === null || callback === void 0 ? void 0 : callback(formError);
    if (errorCount > 0) {
      onError === null || onError === void 0 ? void 0 : onError(formError);
      return false;
    }
    return true;
  });

  /**
   * Check the data field
   * @param fieldName
   * @param callback
   */
  var checkForField = (0, _hooks.useEventCallback)(function (fieldName, callback) {
    var _extends2;
    var model = getCombinedModel();
    var checkResult = model.checkForField(fieldName, formValue || {});
    var nextFormError = (0, _extends5.default)({}, formError, (_extends2 = {}, _extends2[fieldName] = (checkResult === null || checkResult === void 0 ? void 0 : checkResult.errorMessage) || checkResult, _extends2));
    setFormError(nextFormError);
    onCheck === null || onCheck === void 0 ? void 0 : onCheck(nextFormError);
    callback === null || callback === void 0 ? void 0 : callback(checkResult);
    if (checkResult.hasError) {
      onError === null || onError === void 0 ? void 0 : onError(nextFormError);
    }
    return !checkResult.hasError;
  });

  /**
   * Check form data asynchronously and return a Promise
   */
  var checkAsync = (0, _hooks.useEventCallback)(function () {
    var promises = [];
    var keys = [];
    var model = getCombinedModel();
    Object.keys(model.getSchemaSpec()).forEach(function (key) {
      keys.push(key);
      promises.push(model.checkForFieldAsync(key, formValue || {}));
    });
    return Promise.all(promises).then(function (values) {
      var formError = {};
      var errorCount = 0;
      for (var i = 0; i < values.length; i++) {
        if (values[i].hasError) {
          errorCount += 1;
          formError[keys[i]] = values[i].errorMessage;
        }
      }
      onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);
      setFormError(formError);
      if (errorCount > 0) {
        onError === null || onError === void 0 ? void 0 : onError(formError);
      }
      return {
        hasError: errorCount > 0,
        formError: formError
      };
    });
  });

  /**
   * Asynchronously check form fields and return Promise
   * @param fieldName
   */
  var checkForFieldAsync = (0, _hooks.useEventCallback)(function (fieldName) {
    var model = getCombinedModel();
    return model.checkForFieldAsync(fieldName, formValue || {}).then(function (checkResult) {
      var _extends3;
      var nextFormError = (0, _extends5.default)({}, formError, (_extends3 = {}, _extends3[fieldName] = checkResult.errorMessage, _extends3));
      onCheck === null || onCheck === void 0 ? void 0 : onCheck(nextFormError);
      setFormError(nextFormError);
      if (checkResult.hasError) {
        onError === null || onError === void 0 ? void 0 : onError(nextFormError);
      }
      return checkResult;
    });
  });
  var onRemoveError = (0, _react.useCallback)(function (name) {
    /**
     * when this function is called when the children component is unmount,
     * it's an old render frame so use Ref to get future error
     */
    var formError = (0, _omit.default)(realFormErrorRef.current, [nestedField ? (0, _utils.nameToPath)(name) : name]);
    realFormErrorRef.current = formError;
    setFormError(formError);
    onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);
    return formError;
  }, [nestedField, onCheck, setFormError]);
  var setFieldError = (0, _react.useCallback)(function (fieldName, checkResult) {
    var _extends4;
    var nextFormError = nestedField ? (0, _set.default)((0, _extends5.default)({}, formError), (0, _utils.nameToPath)(fieldName), checkResult) : (0, _extends5.default)({}, formError, (_extends4 = {}, _extends4[fieldName] = checkResult, _extends4));
    setFormError(nextFormError);
    onError === null || onError === void 0 ? void 0 : onError(nextFormError);
    onCheck === null || onCheck === void 0 ? void 0 : onCheck(nextFormError);
    return nextFormError;
  }, [formError, nestedField, onCheck, onError, setFormError]);
  var cleanErrors = (0, _hooks.useEventCallback)(function () {
    setFormError({});
  });
  var resetErrors = (0, _hooks.useEventCallback)(function (formError) {
    if (formError === void 0) {
      formError = {};
    }
    setFormError(formError);
  });
  var cleanErrorForField = (0, _hooks.useEventCallback)(function (fieldName) {
    setFormError((0, _omit.default)(formError, [nestedField ? (0, _utils.nameToPath)(fieldName) : fieldName]));
  });
  return {
    formError: realFormError,
    check: check,
    checkForField: checkForField,
    checkAsync: checkAsync,
    checkForFieldAsync: checkForFieldAsync,
    cleanErrors: cleanErrors,
    resetErrors: resetErrors,
    cleanErrorForField: cleanErrorForField,
    setFieldError: setFieldError,
    onRemoveError: onRemoveError
  };
}